input {
  file {
    path => [
      "/usr/share/logstash/logs/info/*.log",
      "/usr/share/logstash/logs/error/*.log"
    ]
    start_position => "beginning"
    sincedb_path => "/dev/null"
    codec => json
  }
}

filter {
  date {
    match => ["timestamp", "ISO8601"]
    target => "@timestamp"
    remove_field => ["timestamp"]
  }

  if [type] == "REQUEST" {
    mutate {
      rename => {
        "method" => "http.method"
        "path" => "http.path"
        "full_url" => "http.url"
        "query" => "http.query"
        "params" => "http.params"
        "body" => "http.request.body"
        "[client][ip]" => "client.ip"
        "[client][user_agent]" => "user_agent.original"
        "[client][referer]" => "http.referer"
        "[user][id]" => "user.id"
        "[user][email]" => "user.email"
        "environment" => "service.environment"
        "service" => "service.name"
        "host" => "service.host"
      }
    }
  }

  if [type] == "RESPONSE" {
    mutate {
      rename => {
        "method" => "http.method"
        "path" => "http.path"
        "full_url" => "http.url"
        "statusCode" => "http.response.status_code"
        "responseTime" => "http.response.time_ms"
        "response_size" => "http.response.body.bytes"
        "content_type" => "http.response.mime_type"
        "response_body" => "http.response.body"
        "[client][ip]" => "client.ip"
        "[client][user_agent]" => "user_agent.original"
        "[client][referer]" => "http.referer"
        "[user][id]" => "user.id"
        "[user][email]" => "user.email"
        "environment" => "service.environment"
        "service" => "service.name"
        "host" => "service.host"
      }
    }
  }

  if [http.response.status_code] {
    mutate {
      convert => {
        "http.response.status_code" => "integer"
        "http.response.time_ms" => "integer"
        "http.response.body.bytes" => "integer"
      }
    }
  }

  if [user.id] {
    mutate {
      convert => {
        "user.id" => "integer"
      }
    }
  }

  # User-Agent 파싱
  useragent {
    source => "user_agent.original"
    target => "user_agent"
  }

  # URL 파싱
  grok {
    match => { "http.path" => "%{URIPATH:http.path.segments}" }
  }

  # 에러 타입 분류
  if [error_type] {
    mutate {
      add_field => {
        "error.type" => "%{error_type}"
      }
      remove_field => ["error_type"]
    }
  }

  # 불필요한 필드 제거
  mutate {
    remove_field => ["@version", "path", "method", "statusCode", "responseTime", "type", "message"]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "nestjs-logs-%{+YYYY.MM.dd}"
  }
  stdout { codec => rubydebug }
} 